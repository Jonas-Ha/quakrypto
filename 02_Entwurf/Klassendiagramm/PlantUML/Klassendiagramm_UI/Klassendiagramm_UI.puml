@startuml name

skinparam pageMargin 10
skinparam pageExternalColor gray
skinparam pageBorderColor black


class App
{
	- navigator : Navigator
	- MainWindow : MainView
}

package Commands
{
	class DelegateCommand
	{
		+ CanExecuteChanged : event Eventhandler
		+ execute : Action<object>
		+ canExecute : Predicate<object>?
		+ DelegateCommand()
		+ CanExecute() : bool
		+ Execute(): void
		+ RaiseCanExecuteChanged(): void
	}
}

class InsertionAdorner
{
 	- isSeparatorHorizontal : bool
	+ IsInFirstHalf : bool
	- adornerLayer : AdornerLayer
	- pen : Pen
	- triangle : PathGeometry
	+ InsertionAdorner() : void
	# OnRender() : void
	- DrawTriangle() : void
	- CalculateStartAndEndPoint() : void
	+ Detach() : void
}

class DraggedAdorner
{
	- contentPresenter : ContentPresenter
	- left : double
	- top : double
	- adornerLayer : AdornerLayer
	+ DraggedAdorner() : void
	+ SetPosition() : void
	# MeasureOverride() : Size
	# ArrangeOverride() : Size
	# GetVisualChild() : Visual
	# VisualChildrenCount() : int
	# GetDesiredTransform() : GeneralTransform
	+ Detach() : void
}

class DragDropHelper
{
	- format : DataFormat
	- initialMousePosition : Point
	- initialMouseOffset : Vector
	- draggedData : object
	- draggedAdorner : DraggedAdorner
	- insertionAdorner : InsertionAdorner
	- topWindow : Window
	- sourceItemsControl : ItemsControl
	- sourceItemContainer : FrameworkElement
	- targetItemsControl : ItemsControl
	- targetItemContainer : FrameworkElement
	- hasVerticalOrientation : bool
	- insertionIndex : int
	- isInFirstHalf : bool
	- instance : DragDropHelper
	- Instance : DragDropHelper {readOnly}
	+ GetIsDragSource() : bool
	+ SetIsDragSource() : void
	+ IsDragSourceProperty : DependencyProperty
	+ GetIsDropTarget() : bool
	+ SetIsDropTarget() :void
	+ IsDropTargetProperty :DependencyProperty
	+ GetDragDropTemplate() : DataTemplate
	+ SetDragDropTemplate() :void
	+ DragDropTemplateProperty :DependencyProperty
	- IsDragSourceChanged() :void
	- IsDropTargetChanged() :void
	- DragSource_PreviewMouseLeftButtonDown() :void
	- DragSource_PreviewMouseMove() :void
	- DragSource_PreviewMouseLeftButtonUp() :void
	- DropTarget_PreviewDragEnter() :void
	- DropTarget_PreviewDragOver() :void
	- DropTarget_PreviewDrop() :void
	- DropTarget_PreviewDragLeave() :void
	- DecideDropTarget() :void
	- IsDropDataTypeAllowed() : bool
	- TopWindow_DragEnter() :void
	- TopWindow_DragOver() :void
	- TopWindow_DragLeave() :void
	- ShowDraggedAdorner() :void
	- RemoveDraggedAdorner() :void
	- CreateInsertionAdorner() :void
	- UpdateInsertionAdornerPosition() :void
	- RemoveInsertionAdorner() :void
}

class Utilities
{
	+ HasVerticalOrientation() : bool
	+ InsertItemInItemsControl() : void
	+ RemoveItemFromItemsControl() : int
	+ IsInFirstHalf() : bool
	+ IsMovementBigEnough() : bool
}

/'************************************************************'/
/'PACKAGE UI												  '/
/'************************************************************'/
package UI
{
	together{
		class MainView
		{
		}

		class MainViewModel
		{
			- _navigator : Navigator
			+ AktuellesViewModel : BaseViewModel {readOnly}
			+ MainViewModel(Navigator)
			- aktuellesViewModelGeaendert() : void
		}

		class Navigator
		{
			+ aktuellesViewModelGeaendert : event Action
			- _aktuellesviewModel : BaseViewModel
			+ aktuellesViewModel() : BaseViewModel
			+ aktuellesViewModel() : BaseViewModel
			- ViewModelWurdeGe√§ndert() : void
		}

		class BaseViewModel
		{
			+ PropertyChanged : event
			+ BaseViewModel() : void
			+ PropertyChangedEventHandler() : event
			# OnPropertyChanged() : void
			# RaisedPropertyChanged() : void
		}
	}

	together{
		class LobbyErstellenViewModel
		{
			- _lobbyname: string 
			- _ausgProtokoll: int 
			- _ausgSchwierigkeit: int 
			- _ausgVariante: int 
			- _ausgPhaseStart: int 
			- _ausgPhaseEnde: int 
			- _netzwerkbasiert: bool 
			+ Lobbyname: string 
			+ AusgProtokoll: int 
			+ AusgSchwierigkeit: int 
			+ AusgVariante: int 
			+ AusgPhaseStart: int 
			+ AusgPhaseEnde: int 
			+ Netzwerkbasiert: bool 
			+ LobbyErstellen : DelegateCommand
			+ HauptMenu : DelegateCommand
			+ LobbyErstellenViewModel() : void	
		}

		class LobbyErstellenView
		{
		}
	}
	
	together{
		class LobbyBeitrittViewModel
		{
			+ HauptMenu : DelegateCommand
			+ LobbyBeitreten : DelegateCommand
			- _ausgewaehlteLobby : int
			+ verfuegbareLobbys : ObservableCollection 
			+ ausgewaehlteLobby : int 
			+ LobbyBeitretenViewModel() : void 
			+ SpielBeitreten() : void 
			+ SpielBeitreten : DelegateCommand 
			+ ZurueckZumHauptmenue : DelegateCommand 
		}

		class LobbyBeitrittView
		{
		}
	}
	
	together{
		class HauptMenueViewModel
		{
			+ HauptMenueViewModel() : void
			+ LobbyErstellen : DelegateCommand
			# LobbyBeitreten : DelegateCommand
		}
			
		class HauptMenueView
		{
		}
	}
	
	together{
		class LobbyScreenViewModel
		{
			+ NameLobby : string
			+ Variante : string
			+ Schwierigkeitsgrad : string
			+ Phase : string
			+ Protokoll : string
			+ AliasAliceText : string
			+ AliasBobText : string
			+ AliasEveText : string
			+ PasswortAliceText : string
			+ PasswortBobText : string
			+ PasswortEveText : string
			+ BenutzerRollenCollection : ObservableCollection()
			+ LobbyViewModel() : void
			+ SpielStarten() : void
			+ SpielStarten : DelegateCommand
			+ LobbyVerlassen : DelegateCommand
			+ ButtonBestaetigen : DelegateCommand
			+ ButtonHauptmenue : DelegateCommand
			+ ButtonWiki : DelegateCommand
		}

		class LobbyScreenView
		{
		}
	}
	
	together{
		class WikiViewModel
		{
			+ WikiSeiten : ObservableCollection<WikiSeite>
			+ SelektierteWikiSeite : WikiSeite
			- editierModus : bool
			+ EditierModus : bool
			+ LabelSichtbar : Visibility
			+ TextBoxSichtbar : Visibility
			+ SeitenErweitern : DelegateCommand
			+ SeitenBearbeiten : DelegateCommand
			+ SeiteEntfernen : DelegateCommand
			+ SeiteSelektiert : DelegateCommand
			+ WikiViewModel() : void
			+ Umbenennen : DelegateCommand
			+ WikiVerlassen : DelegateCommand
			+ ZumHauptmenue : DelegateCommand
		}

		class WikiView
		{
		}
		
		class WikiButton
		{
		}
	}
	

	together{
		class AufzeichnungViewModel
		{
			- uebungsszenario : IUebungsszenario
			+ HauptMenu : DelegateCommand
			+ AufzeichnungViewModel() : void
		}

		class AufzeichnungView
		{
		}
	}

	together{
		class SpielViewModel
		{
			- uebungsszenario : IUebungsszenario
			+ HauptMenu : DelegateCommand
			+ BituebertragungEingang: ObservableCollection<Information>
			+ PhotonenuebertragungEingang : ObservableCollection<Information>  
			+ BituebertragungAusgang : ObservableCollection<Information>
			+ PhotonenuebertragungAusgang : ObservableCollection<Information>  
			+ CraftingFeldPhotonen : Information
			+ CraftingFeldPolarisation : Information
			+ CraftingFeldErgebnis : Information
			+ Muelleimer : Information
			+ Informationsablage : Information 
			+ SpielEveViewModel() : void
			+ BitfolgeErzeugen : DelegateCommand /'Bitzahlen Icon'/
			+ Ver_Entschluesseln : DelegateCommand /'Schluessel Icon'/
			+ PhotonenErzeugen : DelegateCommand /'P Icon'/
			+ PolschaErzeugen : DelegateCommand /'Filter Icon'/
			+ Streichen : DelegateCommand /'Radiergummi Icon'/
			+ TextEditieren : DelegateCommand /'Editieren Icon'/
			+ Vergleichen : DelegateCommand /'Waage Icon'/
			+ ZahlErzeugen : DelegateCommand /'Raute Icon'/
			+ ZufaelligGenerieren : DelegateCommand /'Wuerfel Icon'/
			+ Fragezeichen : DelegateCommand /'Fragezeichen Icon'/
			+ ZugBeenden : DelegateCommand
			+ Hauptmenue : DelegateCommand
			+ OperationAusfuhren : DelegateCommand
			+ InformationLoeschen : DelegateCommand
		}
		
		class SpielView
		{
		}

		note right of SpielViewModel
		Bitzahlen Icon : BitfolgeErzeugenCommand()
		Schluessel Icon : Ver_EntschluesselnCommand()
		P Icon : PhotonenErzeugenCommand()
		Filter Icon : PolschaErzeugenCommand()
		Radiergummi Icon : StreichenCommand()
		Editieren Icon : TextEditierenCommand()
		Waage Icon : VergleichenCommand()
		Raute Icon : ZahlErzeugenCommand()
		Wuerfel Icon : ZufaelligGenerierenCommand()
		Fragezeichen Icon : FragezeichenCommand()
		end note
	}

	together{
		class SpielEveViewModel
		{
			- uebungsszenario : IUebungsszenario
			+ HauptMenu : DelegateCommand
			+ BituebertragungEingangAlice : ObservableCollection<Information> 
			+ BituebertragungEingangBob : ObservableCollection<Information>
			+ PhotonenuebertragungEingangAlice : ObservableCollection<Information>
			+ PhotonenuebertragungEingangBob : ObservableCollection<Information>  
			+ BituebertragungAusgangAlice : ObservableCollection<Information>
			+ BituebertragungAusgangBob : ObservableCollection<Information>
			+ PhotonenuebertragungAusgangAlice : ObservableCollection<Information>
			+ PhotonenuebertragungAusgangBob : ObservableCollection<Information>  
			+ CraftingFeldPhotonen : Information
			+ CraftingFeldPolarisation : Information
			+ CraftingFeldErgebnis : Information
			+ Muelleimer : Information
			+ Informationsablage : Information 
			+ SpielEveViewModel() : void
			+ BitfolgeErzeugen : DelegateCommand /'Bitzahlen Icon'/
			+ Ver_Entschluesseln : DelegateCommand /'Schluessel Icon'/
			+ PhotonenErzeugen : DelegateCommand /'P Icon'/
			+ PolschaErzeugen : DelegateCommand /'Filter Icon'/
			+ Streichen : DelegateCommand /'Radiergummi Icon'/
			+ TextEditieren : DelegateCommand /'Editieren Icon'/
			+ Vergleichen : DelegateCommand /'Waage Icon'/
			+ ZahlErzeugen : DelegateCommand /'Raute Icon'/
			+ ZufaelligGenerieren : DelegateCommand /'Wuerfel Icon'/
			+ Fragezeichen : DelegateCommand /'Fragezeichen Icon'/
			+ ZugBeenden : DelegateCommand
			+ Hauptmenue : DelegateCommand
			+ OperationAusfuhren : DelegateCommand
			+ InformationLoeschen : DelegateCommand
		}

		class SpielEveView
		{
		}

		note left of SpielEveViewModel
		Bitzahlen Icon : BitfolgeErzeugenCommand() : void
		Schluessel Icon : Ver_EntschluesselnCommand() : void
		P Icon : PhotonenErzeugenCommand() : void
		Filter Icon : PolschaErzeugenCommand() : void
		Radiergummi Icon : StreichenCommand() : void
		Editieren Icon : TextEditierenCommand() : void
		Waage Icon : VergleichenCommand() : void
		Raute Icon : ZahlErzeugenCommand() : void
		Wuerfel Icon : ZufaelligGenerierenCommand() : void
		Fragezeichen Icon : FragezeichenCommand() : void
		end note
	}
	
	together{
		class RolleEntsperrenViewModel
		{
			- passwort : string
			+ RolleEntsperren : DelegateCommand 
			+ ZumHauptmenue : DelegateCommand
		}

		class RolleEntsperrenView
		{
		}
	}

	
}
App -- MainView
App -- Navigator
MainView -- MainViewModel
BaseViewModel <|-u- RolleEntsperrenViewModel
BaseViewModel <|-u- AufzeichnungViewModel
BaseViewModel <|-u- SpielEveViewModel
BaseViewModel <|-u- SpielViewModel
BaseViewModel <|-u- LobbyBeitrittViewModel
BaseViewModel <|-u- LobbyScreenViewModel
BaseViewModel <|-- WikiViewModel
BaseViewModel <|-- HauptMenueViewModel
BaseViewModel <|-- LobbyErstellenViewModel
BaseViewModel <|-- MainViewModel
Navigator -- MainViewModel
SpielView -- SpielViewModel
SpielEveView -- SpielEveViewModel
RolleEntsperrenView -- RolleEntsperrenViewModel
LobbyErstellenView -- LobbyErstellenViewModel
LobbyBeitrittView -- LobbyBeitrittViewModel
AufzeichnungView -- AufzeichnungViewModel
HauptMenueView -- HauptMenueViewModel
LobbyScreenView -- LobbyScreenViewModel
WikiView -- WikiViewModel

@enduml