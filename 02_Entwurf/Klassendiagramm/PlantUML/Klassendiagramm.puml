@startuml name

/'************************************************************'/
/'PACKAGE Model												  '/
/'************************************************************'/
package Model
{
	together {
		interface IUebungsszenario
		{
			+ <<get, set>> Rollen() : List<Rolle>
			+ <<get, set>> Schwierigkeitsgrad() : SchwierigkeitsgradEnum
			+ <<get, set>> Variante() : IVariante
			+ <<get, set>> StartPhase() : uint
			+ <<get, set>> EndPhase() : uint
			+ <<get, set>> Uebertragungskanal() : Uebertragungskanal
			+ <<get, set>> Aufzeichnung() : Aufzeichnung
			+ VeroeffentlicheLobby() : void
			+ RolleHinzufuegen() : bool
			+ RolleEntfernen() : bool
			+ NaechsterZug() : void
			+ ErzeugeProtokoll() : void
		}

		class UebungsszenarioLokal
		{
		}

		class UebungsszenarioNetzwerk
		{
		}
	}

	together {
		class Aufzeichnung
		{
			- handlungsschritte : List<Handlungsschritt>
			+ HaengeHandlungsschrittAn() : void
			+ HaengeListeHandlungsschritteAn() : void
		}

		class Uebertragungskanal
		{
			- photonenKanal : List<Information>
			- bitKanal : List<Information>
			+ SpeicherNachrichtAb() : void
			+ LeseKanalAus() : List<Information>
			+ LoescheNachricht() : void
		}

		enum SchwierigkeitsgradEnum
		{
			Leicht
			Mittel
			Schwer
		}
	}
	
	together {
		class Operationen
		{
			+ NachrichtSenden() : Information
			+ NachrichtEmpfangen() : Information 
			+ NachrichtAbhoeren() : Information 
			+ BitfolgeGenerierenZahl() : Information 
			+ BitfolgeGenerierenAngabe() : Information 
			+ PolarisationsschemataGenerierenZahl() : Information 
			+ PolarisationsschemataGenerierenAngabe() : Information 
			+ PhotonenGenerieren() : Information 
			+ BitmaskeGenerieren() : Information 
			+ PolschataVergleichen() : Information 
			+ BitfolgenVergleichen() : Information 
			+ PhotonenZuBitfolge() : Information 
			+ TextVerschluesseln() : Information 
			+ TextEntschluesseln() : Information 
			+ BitsStreichen() : Information 
			+ BitsFreiBearbeiten() : Information 
			+ ZugBeenden() : bool 
		}

		enum OperationsEnum
		{
			NachrichtSenden
			NachrichtEmpfangen
			NachrichtAbhoeren
			BitfolgeGenerierenZahl
			BitfolgeGenerierenAngabe
			PolarisationsschemataGenerierenZahl
			PolarisationsschemataGenerierenAngabe
			PhotonenGenerieren
			BitmaskeGenerieren
			PolschataVergleichen
			BitfolgenVergleichen
			PhotonenZuBitfolge
			TextVerschluesseln
			TextEntschluesseln
			BitsStreichen
			BitsFreiBearbeiten
			TexGenerieren
			ZahlGenerieren
			ZugBeenden
		}
	}

	together {
		class Information
		{
			- informationsID : int
			- informationsName : string
			- informationsTyp : InformationsEnum
			- informationsEmpfaenger : RolleEnum
			- informationsInhalt : string
			+ <<get, init>> InformationsID() : int
			+ <<get, init>> InformationsName() : string
			+ <<get, init>> InformationsTyp() : InformationsEnum
			+ <<get, set>> InformationsEmpfaenger() : RolleEnum
			+ <<get, init>> InformationsInhalt() : string
		}

		class Handlungsschritt
		{
			- operationsTyp : OperationsEnum
			- operand1 : Information
			- operand2 : Information
			- ergebnis : Information
			- rolle : RolleEnum
			- aktuellePhase : uint
			- {static} op : Operationen
			- {static} HandlungsschrittKommando : Dictionary
			+ <<get, init>> OperationsTyp() : OperationsEnum
			+ <<get, init>> Operand1() : Information
			+ <<get, init>> Operand2() : Information
			+ <<get, set>> Ergebnis() : Information
			+ <<get, init>> Rolle() : RolleEnum
			+ <<get, set>> AktuellePhase() : uint
			+ HandlungsschrittAusfuehren() : void
		}

		class Rolle
		{
			- rolle : RolleEnum
			- alias : string
			- passwort : string
			- informationsablage : List<Information>
			- informationszaehler : uint
			- zug : List<Handlungsschritt>
			+ BeginneZug() : bool
			+ BeendeZug() : List<Handlungsschritt>
			+ ErzeugeHandlungsschritt() : void
		}

		enum InformationsEnum
		{
			Zahl
			Bitfolge
			Photonen
			Polarisationsschemata
			unscharfePhotonen
			ASCII-Text
			VerschluesselterText
		}

		enum RolleEnum
		{
			Alice
			Bob
			Eve
		}
	}

	together {
		interface IVariante
		{
			+ <<get>> AktuellePhase() : uint
			+ <<get>> Schwierigkeitsgrad() : SchwierigkeitsgradEnum
			+ <<get>> VarianteName() : string
			+ <<get>> MoeglicheRollen() : List<RolleEnum>
			+ NaechsteRolle() : RolleEnum
			+ GebeHilfestellung() : List<OperationsEnum>
		}

		class VarianteNormalerAblauf
		{
		}

		class VarianteAbhoeren
		{
		}

		class VarianteManInTheMiddle
		{
		}
	}

	together {
		class Wiki
		{
			+ eintraege : Eintrag[]
			+ ErstelleEintrag() : void
			+ BearbeiteEintrag(Eintrag) : void
			+ LoescheEintrag(Eintrag) : void
		}

		class Eintrag
		{
			+ inhalt : string
		}
	}
}

/'Model-Beziehungen: Definition der Beziehungen der Komponenten im Model'/
 IVariante <|-- VarianteNormalerAblauf
 IVariante <|-- VarianteManInTheMiddle
 IVariante <|-- VarianteAbhoeren
 IVariante <-- IUebungsszenario
 
 IUebungsszenario <|-- UebungsszenarioLokal
 IUebungsszenario <|-- UebungsszenarioNetzwerk
 
 Rolle <-- IUebungsszenario
 
 Eintrag <-- Wiki

 InformationsEnum <-- Information
 
 Information <-- Handlungsschritt
 
 OperationsEnum <-- Handlungsschritt
 
 Handlungsschritt <-- Rolle
 
 Uebertragungskanal <-- IUebungsszenario
 
 SchwierigkeitsgradEnum <-- IUebungsszenario
 
 Aufzeichnung <-- IUebungsszenario
 
 RolleEnum <-- Rolle
 RolleEnum <-- Information
 
 Operationen <-- Handlungsschritt

/'************************************************************'/
/'PACKAGE UI												  '/
/'************************************************************'/
package UI
{
	class MainViewModel
	{
		+ MainViewModel(Navigator)
		+ CurrentViewModel : BaseViewModel
		- OnCurrentViewModelChanged() : void
	}

	class Navigator
	{
		+ CurrentViewModel() : BaseViewModel
		+ CurrentViewModelChanged() : Event Action
		- OnCurrentViewModelChanged() : void
	}

	class LobbyErstellenViewModel
	{
		 + lobbyname: string 
		 + ausgProtokoll: int 
		 + ausgSchwierigkeit: int 
		 + ausgVariante: int 
		 + ausgPhaseStart: int 
		 + ausgPhaseEnde: int 
		 + netzwerkbasiert: bool 
		 + LobbyErstellenViewModel() : void
		 + LobbyErstellen() : void
		 # LobbyErstellenCommand() : void
		 # ZurueckZumHauptmenueCommand() : void
	}
	
	class LobbyBeitretenViewModel
	{
		 + verfuegbareLobbys : ObservableCollection 
		 + ausgewaehlteLobby : int 
		 + LobbyBeitretenViewModel() : void 
		 + SpielBeitreten() : void 
		 # SpielBeitretenCommand() : void 
		 # ZurueckZumHauptmenueCommand() : void 
	}
	
	class HauptMenueViewModel
	{
		 + HauptMenueViewModel() : void
		 # LobbyErstellenCommand(): void
		 # LobbyBeitretenCommand(): void
		 # WikiOeffnenCommand(): void
	}
	
	class LobbyViewModel
	{
		 + NameLobby : string
		 + Variante : string
		 + Schwierigkeitsgrad : string
		 + Phase : string
		 + Protokoll : string
		 + AliasAliceText : string
		 + AliasBobText : string
		 + AliasEveText : string
		 + PasswortAliceText : string
		 + PasswortBobText : string
		 + PasswortEveText : string
		 + BenutzerRollenCollection : ObservableCollection()
		 + LobbyViewModel() : void
		 + SpielStarten() : void
		 # SpielStartenCommand() : void
		 # LobbyVerlassenCommand() : void
		 # ButtonBestaetigenCommand() : void
		 # ButtonHauptmenueCommand() : void
		 # ButtonWikiCommand() : void
	}
	
	class WikiViewModel
	{
		 + eintraege : ObservableCollection
		 + eintragsIndex : int
		 + WikiViewModel() : void
		 # UmbenennenCommand() : void
		 # HinzufuegenCommand() : void
		 # LoeschenCommand() : void
		 # SpeichernCommand() : void
		 # WikiVerlassenCommand() : void
		 # ZumHauptmenueCommand() : void
	}
	
	class BaseViewModel
	{
		 + PropertyChanged : event
		 + BaseViewModel() : void
		 + PropertyChangedEventHandler() : event
		 # OnPropertyChanged() : void
		 # RaisedPropertyChanged() : void
	}

	class AufzeichnungViewModel
	{
		+ Aufzeichnung : List
		+ AufzeichnungViewModel() : void
		# ZumHauptmenueCommand() : void
	}

	class SpielViewModel
	{
	}

	class SpielEveViewModel
	{
	}

	class SpielEveView
	{
	}

	class SpielView
	{
	}

	class AufzeichnungView
	{
	}

	class LobbyErstellenView
	{
	}
	
	class LobbyBeitretenView
	{
	}
	
	class HauptMenueView
	{
	}
	
	class LobbyView
	{
	}
	
	class WikiView
	{
	}
}

BaseViewModel <|-- LobbyBeitretenViewModel
BaseViewModel <|-- LobbyViewModel
BaseViewModel <|-- WikiViewModel
BaseViewModel <|-- HauptMenueViewModel
BaseViewModel <|-- LobbyErstellenViewModel
BaseViewModel <|-- MainViewModel
LobbyErstellenView -- LobbyErstellenViewModel
LobbyBeitretenView -- LobbyBeitretenViewModel
HauptMenueView -- HauptMenueViewModel
LobbyView -- LobbyViewModel
WikiView -- WikiViewModel

@enduml