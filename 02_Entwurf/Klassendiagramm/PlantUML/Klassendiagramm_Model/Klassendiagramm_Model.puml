@startuml Klassen_Modell

skinparam pageMargin 10
skinparam pageExternalColor gray
skinparam pageBorderColor black

/'************************************************************'/
/'PACKAGE Model												  '/
/'************************************************************'/
package Model
{
	together {
		interface IUebungsszenario <<interface>>
		{
			+ Rollen: List<Rolle> {readOnly}
			+ Schwierigkeitsgrad: SchwierigkeitsgradEnum {readOnly}
			+ Variante: IVariante {readOnly}
			+ StartPhase: uint {readOnly}
			+ EndPhase: uint {readOnly}
			+ Uebertragungskanal: Uebertragungskanal {readOnly}
			+ Aufzeichnung: Aufzeichnung {readOnly}
			+ Name: string {readOnly}
			+ RolleHinzufuegen(rolle: Rolle): bool
			+ GebeRolleFrei(rolle: RolleEnum)
			+ Starten()
			+ NaechsterZug(): bool
			+ GebeBildschrimFrei(passwort: string): bool 
			+ HandlungsschrittAusfuehrenLassen(handlungsschritt: Handlungsschritt): Information
			+ SpeichereInformationenAb(informationID: uint)
			+ LoescheInformatione(informationID: uint)
			+ Beenden()
		}

		class UebungsszenarioLokal implements IUebungsszenario
		{
			+ UebungsszenarioLokal(schwierigkeitsgrad: SchwierigkeitsgradEnum, variante: IVariante, startPhase: uint, endPhase: uint) <<create>>
			+ RolleHinzufuegen(rolle: Rolle): bool
			+ GebeRolleFrei(rolle: RolleEnum)
			+ Starten()
			+ NaechsterZug(): bool
			+ GebeBildschrimFrei(passwort: string): bool 
			+ HandlungsschrittAusfuehrenLassen(handlungsschritt: Handlungsschritt): Information
			+ SpeichereInformationenAb(informationID: uint)
			+ LoescheInformatione(informationID: uint)
			+ Beenden()
		}

		class UebungsszenarioNetzwerk implements IUebungsszenario
		{
			+ UebungsszenarioNetzwerk(schwierigkeitsgrad: SchwierigkeitsgradEnum, variante: IVariante, startPhase: uint, endPhase: uint) <<create>>
			+ RolleHinzufuegen(rolle: Rolle): bool
			+ GebeRolleFrei(rolle: RolleEnum)
			+ Starten()
			+ NaechsterZug(): bool
			+ GebeBildschrimFrei(passwort: string): bool 
			+ HandlungsschrittAusfuehrenLassen(handlungsschritt: Handlungsschritt): Information
			+ SpeichereInformationenAb(informationID: uint)
			+ LoescheInformatione(informationID: uint)
			+ Beenden()
			+ ZugWurdeBeendet(handlungsschritte: List<Handlungsschritt>)
			+ UebungsszenarioWurdeBeendetHost()
			+ UebungsszenarioWurdeBeendetClient()
			+ AufzeichnungUpdate(handlungsschritte: List<Handlungsschritt>)
			+ KontrolleErhalten()
			+ UebungsszenarioWurdeGestartet()
			+ NeueRollenInformation(rolleAlice: Rolle, rolleBob: Rolle?, rolleEve: Rolle?)
		}
	}

	together {
		class Aufzeichnung
		{
			+ Handlungsschritte : List<Handlungsschritt> {readOnly}
			+ Aufzeichnung() <<create>>
			+ HaengeHandlungsschrittAn(Handlungsschritt: Handlungsschritt)
			+ HaengeListeHandlungsschritteAn(Handlungsschritte: List<Handlungsschritt>)
		}

		class Uebertragungskanal
		{
			+ photonenKanal : List<Information> {readOnly}
			+ bitKanal : List<Information> {readOnly}
			+ Uebertragungskanal() <<create>>
			+ SpeicherNachrichtAb(informartion: Information)
			+ LeseKanalAus(kanal: KanalEnum): List<Information>
			+ LoescheNachricht(kanal: KanalEnum, informationID: uint)
		}

		enum KanalEnum
		{
			PhotonenKanal
			BitKanal
		}

		enum SchwierigkeitsgradEnum
		{
			Leicht
			Mittel
			Schwer
		}
	}
	
	together {
		class Operationen
		{
			+ NachrichtSenden() : Information
			+ NachrichtEmpfangen() : Information 
			+ NachrichtAbhoeren() : Information 
			+ BitfolgeGenerierenZahl() : Information 
			+ BitfolgeGenerierenAngabe() : Information 
			+ PolarisationsschemataGenerierenZahl() : Information 
			+ PolarisationsschemataGenerierenAngabe() : Information 
			+ PhotonenGenerieren() : Information 
			+ BitmaskeGenerieren() : Information 
			+ PolschataVergleichen() : Information 
			+ BitfolgenVergleichen() : Information 
			+ PhotonenZuBitfolge() : Information 
			+ TextVerschluesseln() : Information 
			+ TextEntschluesseln() : Information 
			+ BitsStreichen() : Information 
			+ BitsFreiBearbeiten() : Information 
			+ ZugBeenden() : bool 
		}

		enum OperationsEnum
		{
			NachrichtSenden
			NachrichtEmpfangen
			NachrichtAbhoeren
			BitfolgeGenerierenZahl
			BitfolgeGenerierenAngabe
			PolarisationsschemataGenerierenZahl
			PolarisationsschemataGenerierenAngabe
			PhotonenGenerieren
			BitmaskeGenerieren
			PolschataVergleichen
			BitfolgenVergleichen
			PhotonenZuBitfolge
			TextGenerieren
			TextVerschluesseln
			TextEntschluesseln
			BitsStreichen
			BitsFreiBearbeiten
			TexGenerieren
			ZahlGenerieren
			ZugBeenden
		}
	}

	together {
		class Information
		{
			+ Information(informationID: uint, informartionsName: string, informartionsTyp: InformationsEnum, informartionsEmpfaenger: RolleEnum, informartionsInhalt: object) <<create>>
			+ InformationsID: uint {readOnly}
			+ InformationsName: string {readOnly}
			+ InformationsTyp: InformationsEnum {readOnly}
			+ InformationsEmpfaenger: RolleEnum {readOnly}
			+ InformationsInhalt: object {readOnly}
		}

		class Handlungsschritt
		{
			- {static} op : Operationen
			- {static} HandlungsschrittKommando : Dictionary<OperationsEnum, Delegate>
			+ Handlungsschritt(informationsID: uint, operationsTyp: OperationsEnum, operand1: Information, operand2: Information, ergebnisName: String, rolle: RolleEnum) <<create>>
			+ OperationsTyp: OperationsEnum {readOnly}
			+ Operand1: Information {readOnly}
			+ Operand2: Information {readOnly}
			+ Ergebnis: Information
			+ ErgebnisName: string
			+ Rolle: RolleEnum {readOnly}
			+ AktuellePhase: uint
			+ HandlungsschrittAusfuehren()
		}

		class Rolle
		{
			+ Rolle(rolle: RolleEnum, alias: string, passwort: string) <<create>>
			+ RolleTyp: Rolle {readOnly}
			+ BeginneZug(passwort: string): bool
			+ ErzeugeHandlungsschritt(operationsTyp: OperationsEnum, operand1: Information, operand2: Information, ergebnisInformationsName: String, rolle: RolleEnum): Handlungsschritt
			+ SpeichereInformationenAb(informartion: Information)
			+ LoescheInformatione(information: Information)
			+ AktualisiereInformationsZaehler(informartionszaehler: uint)
		}

		enum InformationsEnum
		{
			Zahl
			Bitfolge
			Photonen
			Polarisationsschemata
			unscharfePhotonen
			ASCII-Text
			VerschluesselterText
		}

		enum RolleEnum
		{
			Alice
			Bob
			Eve
		}
	}

	together {

		class NetzwerkClient {
			+ {static} VerfuegbareLobbys: ObservableCollection<Lobby> {readOnly}
			+ {static} BeginneSucheNachLobbys()
			+ {static} BeendeSucheNachLobbys()
			+ {static} VerbindeMitUebungsszenario(netzwerkBeitrittInfo: UebungsszenarioNetzwerkBeitritt)
			+ {static} WaehleRolle(gewählteRolle: RolleEnum, alias: string)
			+ {static} GebeRolleFrei(freizugebendeRolle: RolleEnum)
			+ {static} BeendeZug(handlundsschritte: List<Handlungsschritt>)
			+ {static} BeendeUebungsszenario()
			+ {static} Uebungsszenario: UebungsszenarioNetzwerk {writeOnly}
		}

		class NetzwerkHost {
			+ {static} AliceRolle: Rolle {readOnly}
			+ {static} BobRolle: Rolle {readOnly}
			+ {static} EveRolle: Rolle {readOnly}
			+ {static} BeendeTCPLobby()
			+ {static} SendeRollenInformation()
			+ {static} StarteUebungsszenario()
			+ {static} UebergebeKontrolle(nächsteRolle: Rolle)
			+ {static} SendeAufzeichnungsUpdate(empfänger: Rolle, neueHandlungsschritte: List<Handlungsschritt>)
			+ {static} BeginneZyklischesSendenVonLobbyinformation(netzwerkBeitrittInfo: UebungsszenarioNetzwerkBeitritt)
			+ {static} BeendeUebungsszenario()
			+ {static} Uebungsszenario: UebungsszenarioNetzwerk {writeOnly}
		}

		class UebungsszeanrioNetzwerkBeitrittInfo {
			+ IPAdresse: IPAddress
			+ Lobbyname: string
			+ Protokoll: string
			+ Variante: string
			+ Schwierigkeitsgrad: SchwierigkeitsgradEnum
			+ AliceIcon: BitmapImage
			+ BobIcon: BitmapImage
			+ EveIcon: BitmapImage
			+ UebungsszeanrioNetzwerkBeitrittInfo(address: IPAddress, lobbyname: string, protokoll: string, variante: string, schwierigkeitsgrad: SchwierigkeitsgradEnum, aliceIcon: BitmapImage, bobIcon: BitmapImage, eveIcon: BitmapImage) <<create>>
		}
	}

	together {
		interface IVariante <<interface>>
		{
			+ AktuellePhase: uint {readOnly}
			+ AktuelleRolle: RolleEnum {readOnly}
			+ VarianteName: string {readOnly}
			+ ProtokollName: string {readOnly}
			+ MoeglicheRollen: List<RolleEnum> {readOnly}
			+ NaechsteRolle(): RolleEnum
			+ GebeHilfestellung(schwierigkeitsgrad: SchwierigkeitsgradEnum) : List<OperationsEnum>
			+ BerechneAktuellePhase(sender: object, e: NotifyCollectionChangedEventArgs)
		}

		class VarianteNormalerAblauf implements IVariante
		{
			+ VarianteNormalerAblauf(startPhase: uint) <<create>>
			+ NaechsteRolle(): RolleEnum
			+ GebeHilfestellung(schwierigkeitsgrad: SchwierigkeitsgradEnum) : List<OperationsEnum>
			+ BerechneAktuellePhase(sender: object, e: NotifyCollectionChangedEventArgs)
		}

		class VarianteAbhoeren implements IVariante
		{
			+ VarianteAbhoeren(startPhase: uint) <<create>>
			+ NaechsteRolle(): RolleEnum
			+ GebeHilfestellung(schwierigkeitsgrad: SchwierigkeitsgradEnum) : List<OperationsEnum>
			+ BerechneAktuellePhase(sender: object, e: NotifyCollectionChangedEventArgs)
		}

		class VarianteManInTheMiddle implements IVariante
		{
			+ VarianteManInTheMiddle(startPhase: uint) <<create>>
			+ NaechsteRolle(): RolleEnum
			+ GebeHilfestellung(schwierigkeitsgrad: SchwierigkeitsgradEnum) : List<OperationsEnum>
			+ BerechneAktuellePhase(sender: object, e: NotifyCollectionChangedEventArgs)
		}
	}

	together {
		class Wiki
		{
			+ {static} WikiSeiten: ObservableCollection<WikiSeite> {readOnly}
			+ {static} WikiIstOffen: bool {readOnly}
			+ Wiki() <<create>>
			+ SpeichereAlleWikiSeiten()
			+ SeitenErweitern()
			+ SeiteEntfernen()
			+ SeiteSelektieren(identifier: string)
		}

		class WikiSeite {
			+ {static} InlineList: ObservableCollection<Inline> {readOnly}
			+ Identifier: string {readOnly}
			+ WikiSeiteName: string
			+ Inhalt: string
			+ WikiSeite(wikiSeiteName: string, inhalt: string) <<create>>
			+ SetzeAktivStatus(aktiv: bool)
			+ SetzeEditierModus(neuerEditierModus: bool)
		}
	}
}
/'
 Wiki --* WikiSeite

 SchwierigkeitsgradEnum -- IUebungsszenario 
 Aufzeichnung -- IUebungsszenario
 Uebertragungskanal  -- IUebungsszenario
 KanalEnum --> Uebertragungskanal 
 IUebungsszenario ..> IVariante
 IUebungsszenario -- Rolle 
 
 UebungsszeanrioNetzwerkBeitrittInfo -- NetzwerkClient
 UebungsszeanrioNetzwerkBeitrittInfo --NetzwerkHost
 NetzwerkClient -- UebungsszenarioNetzwerk
 NetzwerkHost -- UebungsszenarioNetzwerk
 

 Information -- InformationsEnum
 Handlungsschritt -- Information
 Information -- RolleEnum

 OperationsEnum -- Handlungsschritt
 Operationen -- Handlungsschritt

 Handlungsschritt -- Rolle 
 Rolle --> RolleEnum
 '/

 

 IVariante <.. IUebungsszenario

 
 Rolle <-- IUebungsszenario

 InformationsEnum <-- Information
 
 Information <-- Handlungsschritt
 
 OperationsEnum <-- Handlungsschritt
 
 Handlungsschritt <-- Rolle
 
 Uebertragungskanal <-- IUebungsszenario
 KanalEnum <-- Uebertragungskanal 
 
 SchwierigkeitsgradEnum <-- IUebungsszenario
 
 Aufzeichnung <-- IUebungsszenario
 
 RolleEnum <-- Rolle
 Information --> RolleEnum
 
 Operationen <-- Handlungsschritt

WikiSeite *-- Wiki

UebungsszeanrioNetzwerkBeitrittInfo <-- NetzwerkClient
 UebungsszeanrioNetzwerkBeitrittInfo <-- NetzwerkHost
 NetzwerkClient --> UebungsszenarioNetzwerk
 NetzwerkHost --> UebungsszenarioNetzwerk
 

@enduml
