@startuml name

skinparam pageMargin 10
skinparam pageExternalColor gray
skinparam pageBorderColor black

/'************************************************************'/
/'PACKAGE Model												  '/
/'************************************************************'/
package Model
{
	together {
		interface IUebungsszenario
		{
			+ <<get, set>> Rollen() : List<Rolle>
			+ <<get, set>> Schwierigkeitsgrad() : SchwierigkeitsgradEnum
			+ <<get, set>> Variante() : IVariante
			+ <<get, set>> StartPhase() : uint
			+ <<get, set>> EndPhase() : uint
			+ <<get, set>> Uebertragungskanal() : Uebertragungskanal
			+ <<get, set>> Aufzeichnung() : Aufzeichnung
			+ VeroeffentlicheLobby() : void
			+ RolleHinzufuegen() : bool
			+ RolleEntfernen() : bool
			+ NaechsterZug() : void
			+ ErzeugeProtokoll() : void
		}

		class UebungsszenarioLokal
		{
			- rollen : List<Rolle>
			- aktelleRolle : Rolle
			- schwierigkeitsgrad : SchwierigkeitsgradEnum
			- variante : IVariante
			- startPhase : uint
			- endPhase : uint
			- uebertragungskanal : Uebertragungskanal
			- aufzeichnung : Aufzeichnung
			+ UebungsszenarioLokal()
		}

		class UebungsszenarioNetzwerk
		{
			- rollen : List<Rolle>
			- aktelleRolle : Rolle
			- schwierigkeitsgrad : SchwierigkeitsgradEnum
			- variante : IVariante
			- startPhase : uint
			- endPhase : uint
			- uebertragungskanal : Uebertragungskanal
			- aufzeichnung : Aufzeichnung
			+ UebungsszenarioNetzwerk()
		}
	}

	together {
		class Aufzeichnung
		{
			- handlungsschritte : List<Handlungsschritt>
			+ Aufzeichnung()
			+ HaengeHandlungsschrittAn() : void
			+ HaengeListeHandlungsschritteAn() : void
		}

		class Uebertragungskanal
		{
			- photonenKanal : List<Information>
			- bitKanal : List<Information>
			+ Uebertragungskanal()
			+ SpeicherNachrichtAb() : void
			+ LeseKanalAus() : List<Information>
			+ LoescheNachricht() : void
		}

		enum SchwierigkeitsgradEnum
		{
			Leicht
			Mittel
			Schwer
		}
	}
	
	together {
		class Operationen
		{
			+ NachrichtSenden() : Information
			+ NachrichtEmpfangen() : Information 
			+ NachrichtAbhoeren() : Information 
			+ BitfolgeGenerierenZahl() : Information 
			+ BitfolgeGenerierenAngabe() : Information 
			+ PolarisationsschemataGenerierenZahl() : Information 
			+ PolarisationsschemataGenerierenAngabe() : Information 
			+ PhotonenGenerieren() : Information 
			+ BitmaskeGenerieren() : Information 
			+ PolschataVergleichen() : Information 
			+ BitfolgenVergleichen() : Information 
			+ PhotonenZuBitfolge() : Information 
			+ TextVerschluesseln() : Information 
			+ TextEntschluesseln() : Information 
			+ BitsStreichen() : Information 
			+ BitsFreiBearbeiten() : Information 
			+ ZugBeenden() : bool 
		}

		enum OperationsEnum
		{
			NachrichtSenden
			NachrichtEmpfangen
			NachrichtAbhoeren
			BitfolgeGenerierenZahl
			BitfolgeGenerierenAngabe
			PolarisationsschemataGenerierenZahl
			PolarisationsschemataGenerierenAngabe
			PhotonenGenerieren
			BitmaskeGenerieren
			PolschataVergleichen
			BitfolgenVergleichen
			PhotonenZuBitfolge
			TextGenerieren
			TextVerschluesseln
			TextEntschluesseln
			BitsStreichen
			BitsFreiBearbeiten
			TexGenerieren
			ZahlGenerieren
			ZugBeenden
		}
	}

	together {
		class Information
		{
			- informationsID : int
			- informationsEmpfaenger : RolleEnum
			- informationsName : string
			- informationsTyp : InformationsEnum
			- informationsInhalt : string
			+ Information()
			+ <<get, init>> InformationsID() : int
			+ <<get, init>> InformationsName() : string
			+ <<get, init>> InformationsTyp() : InformationsEnum
			+ <<get, set>> InformationsEmpfaenger() : RolleEnum
			+ <<get, init>> InformationsInhalt() : string
		}

		class Handlungsschritt
		{
			- operationsTyp : OperationsEnum
			- operand1 : Information
			- operand2 : Information
			- ergebnis : Information
			- rolle : RolleEnum
			- aktuellePhase : uint
			- {static} op : Operationen
			- {static} HandlungsschrittKommando : Dictionary
			+ Handlungsschritt()
			+ <<get, init>> OperationsTyp() : OperationsEnum
			+ <<get, init>> Operand1() : Information
			+ <<get, init>> Operand2() : Information
			+ <<get, set>> Ergebnis() : Information
			+ <<get, init>> Rolle() : RolleEnum
			+ <<get, set>> AktuellePhase() : uint
			+ HandlungsschrittAusfuehren() : void
		}

		class Rolle
		{
			- rolle : RolleEnum
			- alias : string
			- passwort : string
			- informationsablage : List<Information>
			- informationszaehler : uint
			- zug : List<Handlungsschritt>
			+ Rolle()
			+ <<get>> RolleTyp() : Rolle
			+ BeginneZug() : bool
			+ BeendeZug() : List<Handlungsschritt>
			+ ErzeugeHandlungsschritt() : void
		}

		enum InformationsEnum
		{
			Zahl
			Bitfolge
			Photonen
			Polarisationsschemata
			unscharfePhotonen
			ASCII-Text
			VerschluesselterText
		}

		enum RolleEnum
		{
			Alice
			Bob
			Eve
		}
	}

	together {
		interface IVariante
		{
			+ <<get>> AktuellePhase() : uint
			+ <<get>> Schwierigkeitsgrad() : SchwierigkeitsgradEnum
			+ <<get>> VarianteName() : string
			+ <<get>> MoeglicheRollen() : List<RolleEnum>
			+ NaechsteRolle() : RolleEnum
			+ GebeHilfestellung() : List<OperationsEnum>
		}

		class VarianteNormalerAblauf
		{
			+ VarianteNormalerAblauf()
		}

		class VarianteAbhoeren
		{
			+ VarianteAbhoeren()
		}

		class VarianteManInTheMiddle
		{
			+ VarianteManInTheMiddle()
		}
	}

	together {
		class Wiki
		{
			- eintraege : List<Eintrag>
			+ Wiki()
			+ ErstelleEintrag() : bool
			+ BearbeiteEintrag() : bool
			+ LoescheEintrag() : bool
		}

		class Eintrag
		{
			- ueberschrift : string
			- inhalt : string
			+ Eintrag()
		}
	}
}

 IVariante <|-- VarianteNormalerAblauf
 IVariante <|-- VarianteManInTheMiddle
 IVariante <|-- VarianteAbhoeren
 IVariante <-- IUebungsszenario
 
 IUebungsszenario <|-- UebungsszenarioLokal
 IUebungsszenario <|-- UebungsszenarioNetzwerk
 
 Rolle <-- IUebungsszenario

 InformationsEnum <-- Information
 
 Information <-- Handlungsschritt
 
 OperationsEnum <-- Handlungsschritt
 
 Handlungsschritt <-- Rolle
 
 Uebertragungskanal <-- IUebungsszenario
 
 SchwierigkeitsgradEnum <-- IUebungsszenario
 
 Aufzeichnung <-- IUebungsszenario
 
 RolleEnum <-- Rolle
 RolleEnum <-- Information
 
 Operationen <-- Handlungsschritt

Eintrag <-- Wiki

@enduml