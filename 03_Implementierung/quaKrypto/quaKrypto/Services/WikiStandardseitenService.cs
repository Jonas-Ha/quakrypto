using quaKrypto.Models.Enums;
using System;
using System.IO;
using quaKrypto.Models.Classes;

namespace quaKrypto.Services
{
    public static class WikiStandardseitenService
    {
        private static readonly string WIKI_STANDARDSEITEN_ORDNERNAME = Path.Combine(Environment.CurrentDirectory, "Wiki Standardseiten");

        private static readonly string wikiSeiteOperationenName = Path.Combine(WIKI_STANDARDSEITEN_ORDNERNAME, "(1) Operationen");
        private static readonly string wikiSeiteAblaufMittelName = Path.Combine(WIKI_STANDARDSEITEN_ORDNERNAME, "(2) Ablauf [Mittel]");
        private static readonly string wikiSeiteAblaufNormalEinfachName = Path.Combine(WIKI_STANDARDSEITEN_ORDNERNAME, "(3) Normaler Ablauf [Einfach]");
        private static readonly string wikiSeiteAblaufLauschenEinfachName = Path.Combine(WIKI_STANDARDSEITEN_ORDNERNAME, "(4) Ablauf Lauschangriff [Einfach]");
        private static readonly string wikiSeiteAblaufMITMEinfachName = Path.Combine(WIKI_STANDARDSEITEN_ORDNERNAME, "(5) Ablauf Man-in-the-Middle [Einfach]");

        private const string wikiSeiteOperationenInhalt = "Das BB84-Protokoll\r\nOperationen\r\n\r\nDiese Seite bietet eine detaillierte Anleitung zu den Operationen, die im Übungsszenario zur Ausfühurng angeboten werden.\r\nMit den Operationen lassen sich Informationen erzeugen oder ändern. Jede Operation benötigt einen eindeutigen Namen für die zu generierende Information.\r\n\r\n\r\nBitfolge erzeugen: \r\nGeben Sie eine Zahl ein, um eine zufällige Bitfolge entsprechender Länge zu generieren. Wählen Sie die Option \"Manuell eingeben\", um die Bitfolge selbst einzugeben. Die Länge kann in diesem Fall manuell angepasst werden.\r\n\r\n\r\nEnt/Verschlüsseln: \r\nGeben Sie einen Text und eine Bitfolge ein. Der Text wird mit der Bitfolge über eine XOR-Operation kombiniert und entsprechend ver- oder entschlüsselt.\r\n\r\n\r\nPhotonen erzeugen: \r\nHierfür benötigen Sie ein Polarisationsschema und eine Bitfolge. Die Eingaben erzeugen entsprechende Photonen. Zum Beispiel bedeutet \"✕\"+\"1\" => \"/\", \"✕\"+\"0\" => \"\", \"✛\"+\"1\" => \"-\" , \"✛\"+\"0\" => \"|\".\r\n\r\n\r\nPolarisationsschemata erzeugen: \r\nGeben Sie eine Zahl ein, um eine entsprechend lange zufällige Folge von Polarisationsschemata zu erzeugen. Bei der Option \"Manuell eingeben\" können Sie eine Bitfolge selbst eingeben: \"0\" entspricht \"✕\" und \"1\" entspricht \"✛\".\r\n\r\n\r\nStreichen (Bits): \r\nHierfür sind zwei Eingaben erforderlich: \"Bitfolge zu streichende Bits\" und \"Bitfolge Muster zu streichen\". Beide Bitfolgen müssen gleich lang sein. An den Positionen, an denen das Muster eine 1 aufweist, werden die Bits in der ersten Bitfolge entfernt.\r\n\r\n\r\nVergleichen: \r\nSie können entweder zwei Bitfolgen oder zwei Polarisationsschemata vergleichen. Gleichheit resultiert in einer 0, Ungleichheit in einer 1.\r\n\r\n\r\nZahl erzeugen: \r\nGeben Sie eine Zahl ein, die als Information generiert wird.\r\n\r\n\r\nBitmaske generieren: \r\nGeben Sie zwei Zahlen ein. Die erste definiert die Länge der zu erzeugenden Bitmaske, die zweite die Anzahl der Einsen in der Bitmaske.\r\n\r\n\r\nBitfolge negieren: \r\nNegiert die eingegebene Bitfolge.\r\n\r\n\r\nPhotonen zu Bitfolge: \r\nGeben Sie empfangene Photonen und ein Polarisationsschema ein, um eine entsprechende Bitfolge zu generieren.\r\n\r\n\r\nText generieren: \r\nGeben Sie einen Text ein, der in einer entsprechenden Information gespeichert wird.\r\n\r\n\r\nTextlänge bestimmen: \r\nBestimmt die Anzahl an Zeichen in einer Information.\r\n\r\n\r\nBits frei bearbeiten: \r\nGeben Sie eine Bitfolge ein, um diese frei zu bearbeiten. Dies erzeugt eine neue Information.\r\n\r\n\r\nInformation umbenennen: \r\nSie können den Namen der angegebnen Information abändern.";
        private const string wikiSeiteAblaufMittelInhalt = "Das BB84-Protokoll\r\nTeilnehmer: Alice, Bob und Eve\r\n\r\n\r\nHinweis: \r\nDer folgende Ablauf entspricht nicht zu 100% dem originalen Protokoll von Charles Bennett und Gilles Brassard.\r\nZur besseren Nutzung des Programms wurden einige Schritte hinzugefügt oder leicht verändert.\r\n\r\nEve ist, falls sie in der Ablaufvariante vorkommt immer zwischen Alice und Bob am Zug.\r\n- Die Abfolge ist also immer Alice, Eve, Bob, Eve, Alice, Eve, ....\r\n- Eve kann die Nachrichten, die Alice und Bob austauschen, abhören. Aus den abgehörten Nachrichten kann sie versuchen den von Alice un Bob verwendeten Schlüssel herzuleiten.\r\n- Sie kann aber auch versuchen sich Alice gegenüber als Bob auszugeben und sich Bob gegebüber als Alice ausgeben und so einen Man-In-The-Middle-Angriff zu starten.\r\n\r\n\r\nPhase 0: Schlüssellänge bestimmen\r\n\r\n- Alice erzeugt eine Nachricht und bestimmt deren Länge.\r\n- Alice wählt eine Schlüssellänge, welche etwas größer ist als die Länge erzeugten Nachricht, und sendet diese an Bob.\r\n- Bob speichert die empfangene Schlüssellänge.\r\n\r\n\r\nPhase 1: Übertragung der mit Photonen codierten Schlüssel\r\n\r\n- Alice erstellt eine zufällige Bitfolge und eine zufällige Folge von Polarisationsschemata gleicher Länge.\r\n- Alice erzeugt Photonen, die die Bitfolge und das Polarisationsschema codieren, und sendet sie an Bob.\r\n- Bob erstellt eine zufällige Folge von Polarisationsschemata gleicher Länge und liest die empfangenen Photonen, um daraus eine Bitfolge zu erzeugen.\r\n\r\n\r\nPhase 2: Vergleich der Polarisationsschemata und Erzeugung des Schlüssels\r\n\r\n- Alice sendet ihr Polarisationschema an Bob.\r\n- Bob vergleicht sein Polarisationsschema mit dem von Alice, um eine Bitmaske zu erstellen. Dabei streicht er die nicht übereinstimmenden Bits aus seiner Schlüsselbitfolge.\r\n- Bob sendet seine Bitmaske an Alice, Sie steucht die nicht übereinstimmenden Bits aus ihrer Bitfolge.\r\n\r\n\r\nPhase 3: Überprüfung der Schlüssel\r\n\r\n- Alice erstellt eine Bitmaske zur Auswahl der Prüfbits und streicht diese Bits aus dem Schlüssel.\r\n- Alice sendet die Prüfbitmaske an Bob, der die Prüfbits aus dem Schlüssel extrahiert und streicht.\r\n- Bob sendet die Prüfbits an Alice, die ihre Prüfbits mit den empfangenen Prüfbits vergleicht.\r\n\r\n\r\nPhase 4: Nachrichtenübertragung\r\n\r\n- Alice verschlüsselt ihre Nachricht mit dem endgültigen Schlüssel und sendet diese an Bob.\r\n- Bob entschlüsselt die Nachricht mit seinem Schlüssel.\r\n\r\n\r\nDie Phasen 0 bis 4 repräsentieren den Ablauf des BB84-Protokolls in einem Übungsszenario. Bei erfolgreicher Durchführung haben Alice und Bob einen gemeinsamen geheimen Schlüssel ausgetauscht, mit dem sie ihre Nachrichten verschlüsseln und entschlüsseln können.";
        private const string wikiSeiteAblaufNormalEinfachInhalt = "Das BB84-Protokoll\r\nNormaler Ablauf\r\nTeilnehmer: Alice und Bob\r\n\r\nHinweis: \r\nDer folgende Ablauf entspricht nicht zu 100% dem originalen Protokoll von Charles Bennett und Gilles Brassard.\r\nZur besseren Nutzung des Programms wurden einige Schritte hinzugefügt oder leicht verändert.\r\n\r\nPhase 0:\r\n- Als erstes erzeugt Alice eine Nachricht, welche sie später verschlüsselt an Bob senden möchte.\r\n- Danach misst Alice die Länge ihrer Nachricht.\r\n- Abgeleitet von dieser Länge erzeugt Alice eine Schlüssellänge.\r\n- Diese sollte etwas größer sein, als die Länge der erzeugten Nachricht, da im Verlauf des Protokolls noch einige Bits gestrichen werden müssen.\r\n- Nachdem Alice eine angemessene Schlüssellänge gewählt hat, sendet sie diese auf einem Bitübertragungskanal an Bob.\r\n- Damit ist für Alice dieser Zug beendet.\r\n\r\n- Bob empfängt, die von Alice generierte, Schlüssellänge und speichert sich diese ab.\r\n- Damit endet diese Phase.\r\n\r\nPhase 1:\r\n- In dieser Phase geht es nun darum den mit Photonen kodierten Schlüssel zu übertragen.\r\n- Alice beginnt die Phase, indem sie eine zufällige Bitfolge erstellt. Diese Bitfolge sollte dieselbe Größe haben, wie die in Phase 0 ausgemachte Schlüssellänge.\r\n- Anschließend erzeugt Alice zusätzlich eine zufällige Folge von Polarisationschemata, die die gleiche Länge wie die gerade erzeugte Bitfolge haben muss.\r\n- Mit diesen zwei Operanden kann Alice nun Photonen erzeugen. Diese werden mit dem dazugehörigen Polarisationschema für die Kodierung der Bitfolge verwendet.\r\n- Die daraus entstandenen Photonen sendet Alice über einen Photonenkanal an Bob.\r\n- Danach kann Alice ihren Zug beenden.\r\n\r\n- Bob beginnt mit der Erzeugung einer zufälligen Folge von Polarisationschemata, deren Länge der ermittelten Schlüssellänge entspricht.\r\n- Diese Folge an Polarisationschemata nutzt Bob nun um die erhaltenen unscharfen Photonen zu lesen und in eine Bitfolge zu konvertieren.\r\n- Diese Bitfolge wird später als Schlüssel genutzt.\r\n- Damit endet diese Phase.\r\n\r\nPhase 2:\r\n- Alice beginnt diese Phase, indem sie ihr erzeugtes Polarisationschemata über den Bitübertragungskanal an Bob sendet.\r\n- Damit ist der Zug für Alice beendet.\r\n\r\n- Bob nutzt nun das empfangene Polarisationschemata und vergleicht es mit seinem eigenem.\r\n- Dabei entsteht eine Bitmaske, die anzeigt an welchen Stellen die Polarisationschemata übereinstimmen und an welchen Stellen sie dies nicht tun.\r\n\t--> Dabei steht eine '0' in der Bitmaske für eine Übereinstimmung und eine '1' für keine Übereinstimmung!\r\n- Bob nutzt nun diese Bitmaske und streicht jene Bits aus seiner Schlüsselbitfolge, welche nicht übereinstimmen.\r\n- Schließlich schickt er noch seine erzeugte Bitmaske über den Bitübertragungskanal an Alice und beendet danach seinen Zug.\r\n\r\n- Alice nutzt die von Bob empfangene Bitmaske und streicht auch bei sich die Bits aus ihrer erzeugten Bitfolge, bei welchen die Polarisationschemata nicht übereinstimmen.\r\n- Damit endet diese Phase.\r\n\r\nPhase 3:\r\n- Alice, die noch immer am Zug ist, überlegt sich nun eine Anzahl an Bits aus ihrem Schlüssel, welche sie mit Bob vergleichen möchte.\r\n- Dazu erstellt sie eine Bitmaske mit der aktuellen Länge des Schlüssels und einer Anzahl an Bits.\r\n- Mit dieser Bitmaske kann sie nun diese bestimmten Bits aus dem Schlüssel extrahieren.\r\n- Den endgültigen Schlüssel erhält sie, indem sie die Prüfbits aus dem Schlüssel streicht.\r\n- Die Prüfbitmaske sendet Alice nun über den Bitübertragungskanal an Bob und beendet ihren Zug.\r\n\r\n- Bob empfängt die Prüfbitmaske und extrahiert die Prüfbits aus dem Schlüssel.\r\n- Er streicht außerdem die Prüfbits aus seinen Schlüsselbits und erhält den endgültigen Schlüssel.\r\n- Danach sendet Bob die Prüfbits über den Bitübertragungskanal an Alice und beendet seinen Zug.\r\n\r\n- Jetzt kann Alice ihre Prüfbits mit denen von Bob empfangenen Prüfbits vergleichen.\r\n- Sind die Bits gleich, so wurde die Übertragung nicht abgehört.\r\n- Gibt es aber Unterschiede, so wurden sie wahrscheinlich Opfer eines Lauschangriffs.\r\n- Damit endet diese Phase.\r\n\r\nPhase 4:\r\n- Jetzt kann Alice ihren endgültigen Schlüssel nutzen und ihre erzeugte Nachricht aus Phase 0 verschlüsseln.\r\n- Diese verschlüsselte Nachricht sendet sie dann über den Bitübertragungskanal an Bob.\r\n- Damit beendet Alice auch ihren Zug.\r\n\r\n- Bob empfängt nun die verschlüsselte Nachricht von Alice und kann diese mit seinem Schlüssel entschlüsseln.\r\n- Die Datenübertragung hat erfolgreich stattgefunden und das Protokoll wurde durchgeführt.\r\n- Damit endet diese Phase und das Spiel endet.";
        private const string wikiSeiteAblaufLauschenEinfachInhalt = "Das BB84-Protokoll\r\nLauschangriff\r\nTeilnehmer: Alice, Bob und Eve\r\n\r\nHinweis: \r\nDer folgende Ablauf entspricht nicht zu 100% dem originalen Protokoll von Charles Bennett und Gilles Brassard.\r\nZur besseren Nutzung des Programms wurden einige Schritte hinzugefügt oder leicht verändert.\r\nDieser Ablauf bezieht sich auf einen Lauschangriff durch Eve. Dabei werden die Schritte erläutert, die Eve ausführen kann,\r\num eine gestörte Übertragung zwischen Alice und Bob zu erreichen.\r\n\r\nPhase 0:\r\n- Als Erstes erzeugt Alice eine Nachricht, welche sie später verschlüsselt an Bob senden möchte.\r\n- Danach misst Alice die Länge ihrer Nachricht.\r\n- Abgeleitet von dieser Länge erzeugt Alice eine Schlüssellänge.\r\n- Diese sollte etwas größer sein als die Länge der Nachricht, da im Verlauf des Protokolls noch einige Bits gestrichen werden müssen.\r\n- Nachdem Alice eine angemessene Schlüssellänge gewählt hat, sendet sie diese auf einem Bitübertragungskanal an Bob.\r\n- Damit ist für Alice dieser Zug beendet.\r\n\r\n- Eve kann sich die Schlüssellänge speichern und muss diese an Bob weiterleiten.\r\n\r\n- Bob empfängt die von Alice generierte Schlüssellänge und speichert diese ab.\r\n- Damit ist auch Bobs Zug beendet.\r\n\r\n- Eve kann im Anschluss eigentlich nichts tun, weshalb sie ihren Zug einfach beendet.\r\n- Damit endet diese Phase.\r\n\r\nPhase 1:\r\n- In dieser Phase geht es nun darum den mit Photonen kodierten Schlüssel zu übertragen.\r\n- Alice beginnt, indem sie eine zufällige Bitfolge erstellt. Diese Bitfolge sollte die selbe Größe haben, wie die in Phase 0 ausgewählte Schlüssellänge.\r\n- Danach erzeugt Alice zusätzlich noch eine zufällige Folge an Polarisationschemata, welche dieselbe Länge haben muss wie die eben generierte Bitfolge.\r\n- Mit diesen zwei Operanden kann Alice nun Photonen erzeugen, die die Bitfolge mit den dazugehörigen Polarisationschemata kodiert.\r\n- Die daraus entstandenen Photonen sendet Alice über dem Photonenkanal an Bob.\r\n- Danach kann Alice ihren Zug beenden.\r\n\r\n- Eve kann nun auch Polarisationschemata in Länge des Schlüssels erstellen.\r\n- Die auf dem Photonenkanal liegenden unscharfen Photonen kann Eve nun mit ihren erzeugten Polarisationschemata in eine Bitfolge konvertieren.\r\n- Eve muss nun die Photonen wieder erzeugen und diese an Bob weiterschicken.\r\n\r\n- Bob beginnt, indem er eine zufällige Folge an Polarisationschemata erstellt, welche dieselbe Länge hat wie die ausgemachte Schlüssellänge.\r\n- Diese Folge an Polarisationschemata nutzt Bob nun um die erhaltenen unscharfen Photonen zu lesen und in eine Bitfolge zu konvertieren.\r\n- Diese Bitfolge wird später als Schlüssel genutzt.\r\n- Danach beendet Bob seinen Zug.\r\n\r\n- Jetzt ist Eve dran, welche wieder nichts machen kann. Deshalb beendet sie ihren Zug.\r\n- Damit endet diese Phase.\r\n\r\nPhase 2:\r\n- Alice beginnt diese Phase, indem sie ihr erzeugtes Polarisationschemata über den Bitübertragungskanal an Bob sendet.\r\n- Damit ist der Zug für Alice beendet.\r\n\r\n- Eve empfängt Alices Polarisationschema.\r\n- Eve kann das Polarisationschema mit ihrem vergleichen und erhält eine Bitmaske, die ihr angibt, an welchen Stellen sie das selbe Schema wie Alice genutzt hat.\r\n- Danach leitet sie das Polarisationschema von Alice an Bob weiter und beendet ihren Zug.\r\n\r\n- Bob nutzt nun das empfangene Polarisationschema und vergleicht es mit seinem eigenem Polarisationschema.\r\n- Dabei entsteht eine Bitmaske, die anzeigt an welchen Stellen die Polarisationschemata übereinstimmen und an welchen Stellen eben nicht.\r\n\t--> Dabei steht eine '0' in der Bitmaske für eine Übereinstimmung und eine '1' für keine Übereinstimmung!\r\n- Bob nutzt nun diese Bitmaske und streicht jene Bits aus seiner Schlüsselbitfolge, welche nicht übereinstimmen.\r\n- Zum Schluss schickt er noch seine erzeugte Bitmaske über den Bitübertragungskanal an Alice und beendet danach seinen Zug.\r\n\r\n- Eve nutzt die Bitmaske, die sie mithilfe von Alice Polarisationschema erstellt hat und löscht die falschen Bitstellen aus ihrem Schlüssel.\r\n- Danach nutzt Eve die Bitmaske von Bob und löscht die Bits aus ihren Schlüssel, welche auch Bob gestrichen hat.\r\n- Dann hat sie nur noch Bits in ihrem Schlüssel, welche sowohl von ihr als auch von Bob korrekt dekodiert worden.\r\n- Eve beendet ihren Zug.\r\n\r\n- Alice nutzt die von Bob empfangene Bitmaske und streicht auch bei sich die Bits aus ihrer erzeugten Bitfolge, in der die Polarisationschemata nicht übereinstimmen.\r\n- Damit endet diese Phase.\r\n\r\nPhase 3:\r\n- Alice, die noch immer am Zug ist, überlegt sich nun eine Anzahl an Bits aus ihrem Schlüssel, welche sie mit Bob vergleichen möchte.\r\n- Dazu erstellt sie eine Bitmaske mit der aktuellen Länge des Schlüssels und einer Anzahl an Bits.\r\n- Mit dieser Bitmaske kann sie nun diese bestimmten Bits aus dem Schlüssel extrahieren.\r\n- Den endgültigen Schlüssel erhält sie, indem sie die Prüfbits aus dem Schlüssel streicht.\r\n- Die Prüfbitmaske sendet Alice nun über den Bitübertragungskanal an Bob und sie beendet ihren Zug.\r\n\r\n- Eve empfängt die Prüfbitmaske und extrahiert die Prüfbits aus ihrem Schlüssel.\r\n- Danach beendet sie ihren Zug.\r\n\r\n- Bob empfängt die Prüfbitmaske und extrahiert die Prüfbits aus dem Schlüssel.\r\n- Er streicht außerdem die Prüfbits aus seinen Schlüsselbits und erhält den endgültigen Schlüssel.\r\n- Danach sendet Bob die Prüfbits über den Bitübertragungskanal an Alice und er beendet seinen Zug.\r\n\r\n- Eve empfängt die Prüfbits von Bob und überprüft diese mit ihren extrahierten Prüfbits.\r\n- Sind diese unterschiedlich so weiß Eve, dass sie enttarnt wurde.\r\n- Danach beendet sie ihren Zug.\r\n\r\n- Jetzt kann Alice ihre Prüfbits mit den von Bob empfangenen Prüfbits vergleichen.\r\n\t--> Sind die Bits gleich, so hat ihnen bei der Übertragung keiner zugehört.\r\n\t--> Gibt es aber Unterschiede, so wurden sie wahrscheinlich Opfer eines Lauschangriffs.\r\n- Damit endet diese Phase.\r\n\r\nPhase 4:\r\n- Alice kann erkennen, dass sie Opfer eines Lauschangriffes wurde.\r\n- Zu Lehrzwecken kann man hier aber trotzdem noch eine verschlüsselte Naachricht versenden und sehen, was dies für Auswirkungen hat.\r\n- Jetzt kann Alice ihren endgültigen Schlüssel nutzen und ihre Nachricht vom Anfang verschlüsseln.\r\n- Diese verschlüsselte Nachricht sendet sie dann über den Bitübertragungskanal an Bob.\r\n- Damit beendet Alice ihren Zug.\r\n\r\n- Eve empfängt die verschlüsselte Nachricht und versucht sie mit ihrem Schlüssel zu entschlüsseln.\r\n\r\n- Bob empfängt nun die verschlüsselte Nachricht von Alice und kann diese mit seinem Schlüssel entschlüsseln.\r\n- Die Datenübertragung hat erfolgreich stattgefunden und das Protokoll wurde durchgeführt.\r\n- Damit endet diese Phase und das Spiel endet.";
        private const string wikiSeiteAblaufMITMEinfachInhalt = "Das BB84-Protokoll\r\nLauschangriff\r\nTeilnehmer: Alice, Bob und Eve\r\n\r\nHinweis: \r\nDer folgende Ablauf entspricht nicht zu 100% dem originalen Protokoll von Charles Bennett und Gilles Brassard.\r\nZur besseren Nutzung des Programms wurden einige Schritte hinzugefügt oder leicht verändert.\r\nDieser Ablauf bezieht sich auf einen Man-in-the-Middle Angriff durch Eve. Dabei werden die Schritte erläutert, die Eve ausführen kann,\r\num die Nachricht zwischen Alice und Bob zu verändern.\r\n\r\nAchtung:\r\nInsbesonders für Eve ist es in diesem Modus sehr wichtig die Informationen aussagekräftig zu bennen um nicht durcheinander zu kommen! \r\n\r\nPhase 0:\r\n- Als Erstes erzeugt Alice eine Nachricht, welche sie später verschlüsselt an Bob senden möchte.\r\n- Danach misst Alice die Länge ihrer Nachricht.\r\n- Abgeleitet von dieser Länge erzeugt Alice eine Schlüssellänge.\r\n- Diese sollte etwas größer sein als die Länge der Nachricht, da im Verlauf des Protokolls noch einige Bits gestrichen werden müssen.\r\n- Nachdem Alice eine angemessene Schlüssellänge gewählt hat, sendet sie diese auf einem Bitübertragungskanal an Bob.\r\n- Damit ist für Alice dieser Zug beendet.\r\n\r\n- Eve kann sich die Schlüssellänge speichern.\r\n- Sie erzeugt für ihre Nachricht an Bob eine entsprechende Schlüssellänge.\r\n- Diese sollte etwas größer sein als die Länge der Nachricht, da im Verlauf des Protokolls noch einige Bits gestrichen werden müssen.\r\n- Diese neue Schlüssellänge schickt sie auf dem Bitübertragungskanal an Bob.\r\n\r\n- Bob empfängt die von \"Alice\" generierte Schlüssellänge und speichert diese ab.\r\n- Damit ist auch Bobs Zug beendet.\r\n\r\n- Eve kann im Anschluss eigentlich nichts tun, weshalb sie ihren Zug einfach beendet.\r\n- Damit endet diese Phase.\r\n\r\nPhase 1:\r\n- In dieser Phase geht es nun darum den mit Photonen kodierten Schlüssel zu übertragen.\r\n- Alice beginnt, indem sie eine zufällige Bitfolge erstellt. Diese Bitfolge sollte die selbe Größe haben, wie die in Phase 0 ausgewählte Schlüssellänge.\r\n- Mit diesen zwei Operanden kann Alice nun Photonen erzeugen, die die Bitfolge mit den dazugehörigen Polarisationschemata kodiert.\r\n- Danach erzeugt Alice zusätzlich noch eine zufällige Folge an Polarisationschemata, welche dieselbe Länge haben muss wie die eben generierte Bitfolge.\r\n- Mit diesen zwei Operanden kann Alice nun Photonen erzeugen, die die Bitfolge mit den dazugehörigen Polarisationschemata kodiert.\r\n- Die daraus entstandenen Photonen sendet Alice über dem Photonenkanal an Bob.\r\n- Danach kann Alice ihren Zug beenden.\r\n\r\n- Eve kann nun auch Polarisationschemata in Länge des Schlüssels erstellen.\r\n- Die auf dem Photonenkanal liegenden unscharfen Photonen kann Eve nun mit ihren erzeugten Polarisationschemata in eine Bitfolge konvertieren.\r\n- Mit Bob muss Eve auch eine Bitfolge ausmachen, indem sie eine zufällige Bitfolge erstellt. Diese Bitfolge sollte die selbe Größe haben, wie die in Phase 0 ausgemachte Schlüssellänge.\r\n- Danach erzeugt Eve zusätzlich noch eine zufällige Folge an Polarisationschemata, welche dieselbe Länge haben muss wie die eben generierte Bitfolge.\r\n- Mit diesen zwei Operanden kann Eve nun Photonen erzeugen, die die Bitfolge mit den dazugehörigen Polarisationschemata kodiert.\r\n- Die daraus entstandenen Photonen sendet Eve über dem Photonenkanal an Bob.\r\n- Danach kann Eve ihren Zug beenden.\r\n\r\n- Bob beginnt, indem er eine zufällige Folge an Polarisationschemata erstellt, welche dieselbe Länge hat wie die ausgemachte Schlüssellänge.\r\n- Diese Folge an Polarisationschemata nutzt Bob nun um die erhaltenen unscharfen Photonen zu lesen und in eine Bitfolge zu konvertieren.\r\n- Diese Bitfolge wird später als Schlüssel genutzt.\r\n- Danach beendet Bob seinen Zug.\r\n\r\n- Jetzt ist Eve dran, welche wieder nichts machen kann. Deshalb beendet sie ihren Zug.\r\n- Damit endet diese Phase.\r\n\r\nPhase 2:\r\n- Alice beginnt diese Phase, indem sie ihr erzeugtes Polarisationschemata über den Bitübertragungskanal an Bob sendet.\r\n- Damit ist der Zug für Alice beendet.\r\n\r\n- Eve empfängt Alices Polarisationschema.\r\n- Eve kann das Polarisationschema mit ihrem vergleichen und erhält eine Bitmaske, die ihr angibt, an welchen Stellen sie das selbe Schema wie Alice genutzt hat.\r\n- Diese Bitmaske schickt sie an Alice über den Bitübertragungskanal.\r\n- Danach leitet sie das Polarisationschema, welches sie für Bob benutzt hat, an ihn weiter und beendet ihren Zug.\r\n\r\n- Bob nutzt nun das empfangene Polarisationschema und vergleicht es mit seinem eigenem Polarisationschema.\r\n- Dabei entsteht eine Bitmaske, die anzeigt an welchen Stellen die Polarisationschemata übereinstimmen und an welchen Stellen eben nicht.\r\n\t--> Dabei steht eine '0' in der Bitmaske für eine Übereinstimmung und eine '1' für keine Übereinstimmung!\r\n- Bob nutzt nun diese Bitmaske und streicht jene Bits aus seiner Schlüsselbitfolge, welche nicht übereinstimmen.\r\n- Zum Schluss schickt er noch seine erzeugte Bitmaske über den Bitübertragungskanal an Alice und beendet danach seinen Zug.\r\n\r\n- Eve nutzt die Bitmaske von Bob und löscht die Bits aus ihren Schlüssel, welche auch Bob gestrichen hat.\r\n- Dann hat sie nur noch Bits in ihrem Schlüssel, welche sowohl von ihr als auch von Bob korrekt dekodiert worden sind.\r\n- Eve beendet ihren Zug.\r\n\r\n- Alice nutzt die von Bob empfangene Bitmaske und streicht auch bei sich die Bits aus ihrer erzeugten Bitfolge, in der die Polarisationschemata nicht übereinstimmen.\r\n- Damit endet diese Phase.\r\n\r\nPhase 3:\r\n- Alice, die noch immer am Zug ist, überlegt sich nun eine Anzahl an Bits aus ihrem Schlüssel, welche sie mit Bob vergleichen möchte.\r\n- Dazu erstellt sie eine Bitmaske mit der aktuellen Länge des Schlüssels und einer Anzahl an Bits.\r\n- Mit dieser Bitmaske kann sie nun diese bestimmten Bits aus dem Schlüssel extrahieren.\r\n- Den endgültigen Schlüssel erhält sie, indem sie die Prüfbits aus dem Schlüssel streicht.\r\n- Die Prüfbitmaske sendet Alice nun über den Bitübertragungskanal an Bob und sie beendet ihren Zug.\r\n\r\n- Eve empfängt die Prüfbitmaske und extrahiert die Prüfbits aus ihrem Schlüssel.\r\n- Sie überlegt sich nun eine Anzahl an Bits aus ihrem Schlüssel, welche sie mit Bob vergleichen möchte.\r\n- Dazu erstellt sie eine Bitmaske mit der aktuellen Länge des Schlüssels und einer Anzahl an Bits.\r\n- Mit dieser Bitmaske kann sie nun diese bestimmten Bits aus dem Schlüssel extrahieren.\r\n- Den endgültigen Schlüssel erhält sie, indem sie die Prüfbits aus dem Schlüssel streicht.\r\n- Die Prüfbitmaske sendet Eve nun über den Bitübertragungskanal an Bob und sie beendet ihren Zug.\r\n- Danach beendet sie ihren Zug.\r\n\r\n- Bob empfängt die Prüfbitmaske und extrahiert die Prüfbits aus dem Schlüssel.\r\n- Er streicht außerdem die Prüfbits aus seinen Schlüsselbits und erhält den endgültigen Schlüssel.\r\n- Danach sendet Bob die Prüfbits über den Bitübertragungskanal an Alice und er beendet seinen Zug.\r\n\r\n- Eve empfängt die Prüfbits von Bob und überprüft diese mit ihren extrahierten Prüfbits.\r\n- Sind diese unterschiedlich so weiß Eve, dass sie enttarnt wurde.\r\n- Danach beendet sie ihren Zug.\r\n\r\n- Jetzt kann Alice ihre Prüfbits mit den von Bob empfangenen Prüfbits vergleichen.\r\n\t--> Sind die Bits gleich, so hat ihnen bei der Übertragung keiner zugehört.\r\n\t--> Gibt es aber Unterschiede, so wurden sie wahrscheinlich Opfer eines Lauschangriffs.\r\n- Damit endet diese Phase.\r\n\r\n--> !!! Sie weiß aber nicht, dass sie unwissentlich einen Schlüssel mit Eve ausgemacht hat anstatt wie gewollt mit Bob !!!\r\n\r\nPhase 4:\r\n- Jetzt kann Alice ihren endgültigen Schlüssel nutzen und ihre Nachricht vom Anfang verschlüsseln.\r\n- Diese verschlüsselte Nachricht sendet sie dann über den Bitübertragungskanal an Bob.\r\n- Damit beendet Alice ihren Zug.\r\n\r\n- Eve empfängt die verschlüsselte Nachricht und kann diese mit ihrem Schlüssel für Alice entschlüsseln.\r\n- Sie kann nun ihre Nachricht an Bob mit dem entsprechenden Schlüssel verschlüsseln und an Bob schicken.\r\n\r\n- Bob empfängt nun die verschlüsselte Nachricht von \"Alice\" und kann diese mit seinem Schlüssel entschlüsseln.\r\n- Die Datenübertragung hat erfolgreich stattgefunden und das Protokoll wurde durchgeführt.\r\n- Damit endet diese Phase und das Spiel endet.\r\n\r\n--> !!! Er weiß aber nicht, dass diese Nachricht von Eve geschickt wurde anstatt wie gewollt von Alice !!!";


        public static void ErzeugeAlleStandardWikiseiten()
        {
            if (!Directory.Exists(WIKI_STANDARDSEITEN_ORDNERNAME)) _ = Directory.CreateDirectory(WIKI_STANDARDSEITEN_ORDNERNAME);
            File.WriteAllText(wikiSeiteOperationenName, wikiSeiteOperationenInhalt);
            File.WriteAllText(wikiSeiteAblaufMittelName, wikiSeiteAblaufMittelInhalt);
            File.WriteAllText(wikiSeiteAblaufNormalEinfachName, wikiSeiteAblaufNormalEinfachInhalt);
            File.WriteAllText(wikiSeiteAblaufLauschenEinfachName, wikiSeiteAblaufLauschenEinfachInhalt);
            File.WriteAllText(wikiSeiteAblaufMITMEinfachName, wikiSeiteAblaufMITMEinfachInhalt);
        }

        public static void LadeAlleWikiSeitenMitSchwierigkeit(SchwierigkeitsgradEnum schwierigkeitsgrad)
        {
            Wiki.WikiSeiten.Clear();
            Wiki.WikiSeiten.Add(new WikiSeite(Path.GetFileName(wikiSeiteOperationenName).Split(") ")[1], wikiSeiteOperationenInhalt, 1));
            if (schwierigkeitsgrad.Equals(SchwierigkeitsgradEnum.Mittel)) Wiki.WikiSeiten.Add(new WikiSeite(Path.GetFileName(wikiSeiteAblaufMittelName).Split(") ")[1], wikiSeiteAblaufMittelInhalt, 2));
            else if (schwierigkeitsgrad.Equals(SchwierigkeitsgradEnum.Leicht))
            {
                Wiki.WikiSeiten.Add(new WikiSeite(Path.GetFileName(wikiSeiteAblaufNormalEinfachName).Split(") ")[1], wikiSeiteAblaufNormalEinfachInhalt, 3));
                Wiki.WikiSeiten.Add(new WikiSeite(Path.GetFileName(wikiSeiteAblaufLauschenEinfachName).Split(") ")[1], wikiSeiteAblaufLauschenEinfachInhalt, 4));
                Wiki.WikiSeiten.Add(new WikiSeite(Path.GetFileName(wikiSeiteAblaufMITMEinfachName).Split(") ")[1], wikiSeiteAblaufMITMEinfachInhalt, 5));
            }
            WikiSeite.StandardSeitenGeladen();
        }
    }
}
